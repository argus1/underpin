# -*- coding: utf-8 -*-
"""DevPOST_hack.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BrAb0HHpE5qefgQQvg0PtvFRLgZVP9Wv
"""

!pip install boto3

import json
import boto3
from botocore.exceptions import ClientError, NoCredentialsError

# Replace with your AWS credentials and region
client = boto3.client(service_name="bedrock-runtime", region_name="us-west-2")

# Replace with the model ID for Claude 3 Sonnet
model_id = "anthropic.claude-3-sonnet-20240229-v1:0"

import base64
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        encoded_image = base64.b64encode(image_file.read()).decode("utf-8")
    return encoded_image

image_data = encode_image("dogs.jpeg")  # Replace with your image path

request_body = {
    "anthropic_version": "bedrock-2023-05-31",
    "max_tokens": 2048,
    "messages": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Describe the image",  # You can customize the prompt here
                },
                {
                    "type": "image",
                    "source": {
                        "type": "base64",
                        "media_type": "image/jpeg",  # Adjust based on your image format
                        "data": image_data,
                    },
                },
            ],
        }
    ],
}

try:
    response = client.invoke_model(modelId=model_id, body=json.dumps(request_body))
    result = json.loads(response.get("body").read())

    # Access the generated text description
    text_description = result["content"][0]["text"]
    print(f"Image Description: {text_description}")

except ClientError as err:
    print(f"Error: {err}")

import json
import boto3
from botocore.exceptions import ClientError, NoCredentialsError

# Create a client for Amazon Bedrock
client = boto3.client(service_name="bedrock-runtime", region_name="us-west-2")

# Define your model ID and request body
model_id = "claude-3-sonnet"  # Replace with the actual model ID for Claude 3
request_body = {
    "image": "base64_encoded_image_string"  # Replace with your actual base64 encoded image string
}

def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        encoded_image = base64.b64encode(image_file.read()).decode("utf-8")
    return encoded_image

image_path = "dogs.jpeg"  # Replace with your image path
encoded_image = encode_image(image_path)

request_body = {
    "image": encoded_image
}

try:
    response = client.invoke_model(
        modelId=model_id,
        body=json.dumps(request_body)
    )
    result = json.loads(response.get("body").read())

    # Access the generated text description
    text_description = result["content"][0]["text"]
    print(f"Image Description: {text_description}")

except NoCredentialsError:
    print("Error: Unable to locate AWS credentials.")
except ClientError as err:
    print(f"Client Error: {err}")
except Exception as e:
    print(f"Unexpected error: {e}")

import os

os.environ['AWS_DEFAULT_REGION']='us-west-2'
os.environ['AWS_ACCESS_KEY_ID']=''
os.environ['AWS_SECRET_ACCESS_KEY']=''
os.environ['AWS_SESSION_TOKEN']=''

import boto3

try:
    client = boto3.client('s3')
    response = client.list_buckets()
    print("S3 Buckets:", response['Buckets'])
except NoCredentialsError:
    print("Error: Unable to locate AWS credentials.")
except ClientError as err:
    print(f"Client Error: {err}")
except Exception as e:
    print(f"Unexpected error: {e}")

import json
import boto3
import base64
from botocore.exceptions import ClientError, NoCredentialsError

# Create a client for Amazon Bedrock
client = boto3.client(service_name="bedrock-runtime", region_name="us-west-2")

def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        encoded_image = base64.b64encode(image_file.read()).decode("utf-8")
    return encoded_image

image_path = "dogs.jpeg"  # Replace with your image path
encoded_image = encode_image(image_path)

request_body = {
    "image": encoded_image
}

model_id = "anthropic.claude-3-sonnet-20240229-v1:0"  # Replace with the actual model ID for Claude 3

try:
    response = client.invoke_model(
        modelId=model_id,
        body=json.dumps(request_body)
    )
    result = json.loads(response['body'])

    # Access the generated text description
    text_description = result["content"][0]["text"]
    print(f"Image Description: {text_description}")

except NoCredentialsError:
    print("Error: Unable to locate AWS credentials.")
except ClientError as err:
    print(f"Client Error: {err}")
except Exception as e:
    print(f"Unexpected error: {e}")

import json
import boto3
import base64
from botocore.exceptions import ClientError, NoCredentialsError

  # Create a client for Amazon Bedrock
client = boto3.client(service_name="bedrock-runtime", region_name="us-west-2")

def encode_image(image_path):
  with open(image_path, "rb") as image_file:
    encoded_image = base64.b64encode(image_file.read()).decode("utf-8")
  return encoded_image

bedrock = boto3.client('bedrock')
response = bedrock.list_foundation_models()
print(response.get('modelSummaries'))

image_path = "dogs.jpeg"  # Replace with your image path
encoded_image = encode_image(image_path)
prompt = "Describe the image"
enclosed_prompt = f"\nHuman:{prompt}\n\nAssistant:"

body = json.dumps({
              "prompt": enclosed_prompt,
              "temperature": 0.5,
              "top_p": 1,
              "top_k": 250,
              "max_tokens_to_sample": 200,
              "stop_sequences": ["\n\nHuman:"]
              })

model_id = "anthropic.claude-3-sonnet-20240229-v1:0"

try:
  response = client.invoke_model(
      modelId=model_id,
      body=json.dumps(request_body)
  )
  result = json.loads(response['body'])

  # Access the generated text description
  text_description = result["content"]["text"]
  print(f"Image Description: {text_description}")

except NoCredentialsError:
  print("Error: Unable to locate AWS credentials.")
except ClientError as err:
  print(f"Client Error: {err}")
except Exception as e:
  print(f"Unexpected error: {e}")

